name: terraform plan
description: Validates & Plan terraform configurations
inputs:
  github_token:
    description: Github token
    required: true
  terraform_version:
    description: Version of terraform
    required: true
    default: "1.5.7"
  path:
    description: path to terraform configurations
    required: true
    default: "./"
  plan_artifact_name:
    description: output plan artifact name
    required: true
    default: "artifact"
  plan_artifact_retention_days:
    description: number of days for the plan artifact to be retained
    required: false
    default: "1"
  custom_job_id:
    description: custom job name to distinguish between similar plan steps run in a dynamic manner (e.g. matrix strategy)
    required: false
    default: ""
  quiet_output:
    description: a boolean flag controling whether the output is quieted for noisy terraform commands
    required: false
    default: "false"
  backend_config:
    description: Additional backend configuration to use during 'terraform init'. See https://developer.hashicorp.com/terraform/language/settings/backends/configuration#partial-configuration.
    required: false
    default: ""
outputs:
  validate:
    description: terraform validate output
    value: ${{ steps.validate.outputs.stdout }}
  plan_artifact_id:
    description: plan GitHub artifact id
    value: ${{ steps.upload.outputs.artifact-id }}
  plan_artifact_url:
    description: plan GitHub artifact url
    value: ${{ steps.upload.outputs.artifact-url }}
runs:
  using: "composite"
  steps:
    - uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ inputs.terraform_version }}

    - name: terraform init
      id: init
      shell: bash
      working-directory: ${{ inputs.path }}
      continue-on-error: true
      run: |
        # put terraform backend partial configuration into a file.
        # See https://developer.hashicorp.com/terraform/language/settings/backends/configuration#partial-configuration
        cat <<EOT > ${{ runner.temp }}/backend.tf
        ${{ inputs.backend_config }}
        EOT

        terraform init -backend-config=${{ runner.temp }}/backend.tf

    - name: terraform validate
      id: validate
      shell: bash
      working-directory: ${{ inputs.path }}
      run: terraform validate -no-color

    - name: terraform plan
      id: plan
      shell: bash
      working-directory: ${{ inputs.path }}
      env:
        INPUT_QUIET_TERRAFORM_OUTPUT: ${{ inputs.quiet_output }}
      run: |
        if [ "$INPUT_QUIET_TERRAFORM_OUTPUT" == "true" ]; then
          terraform plan -no-color -lock=false -input=false -out=plan.tmp 1> /dev/null
          terraform show -no-color plan.tmp | tee -a ${GITHUB_WORKSPACE}/plan.out
        else
          terraform plan -no-color -lock=false -input=false -out=plan.tmp
          terraform show -no-color plan.tmp > ${GITHUB_WORKSPACE}/plan.out
        fi

    - name: upload terraform plan
      id: upload
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.plan_artifact_name }}
        path: ${{ inputs.path }}/plan.tmp
        if-no-files-found: error
        overwrite: true
        retention-days: ${{ inputs.plan_artifact_retention_days }}

    - uses: actions/github-script@v7
      if: ${{ github.event_name == 'pull_request' }}
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          const fs = require('fs')

          const defaultJobId = context.job;
          const customJobId = `${{ inputs.custom_job_id }}`
          const jobId = customJobId.length > 0 ? customJobId : defaultJobId;
          
          const maxPlanChars = 65000;

          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          // To identify a correct bot comment when many plan comments exist
          const commentToken = `### Terraform plan in **${jobId}**`;
          const botComment = comments.find(comment => {
            const { job } = context.job;
            return comment.user.type === 'Bot' && comment.body.includes(commentToken)
          });

          // 2. Prepare format of the comment
          const validateExitCode = '${{ steps.validate.outputs.exitcode }}';
          const planExitCode = '${{ steps.plan.outputs.exitcode }}';

          let rawPlanOutput = '', planOutput = '', validateOutput = '';

          // Show errors if not validated successfully
          if (validateExitCode === '0') {
            validateOutput = `${{ steps.validate.outputs.stdout }}`;
          }
          else {
            validateOutput = `${{ steps.validate.outputs.stderr }}`;
          }

          // Show errors if not planned successfully.
          if (planExitCode === '0') {
            rawPlanOutput = fs.readFileSync('plan.out', 'utf8')
          }
          else {
            rawPlanOutput = `${{ steps.plan.outputs.stderr }}`;
          }

          // Show the last maxPlanChars characters of the plan output if too long
          const isPlanOutputTooLong = rawPlanOutput.length > maxPlanChars;
          planOutput = isPlanOutputTooLong ? `[...]\n\n${rawPlanOutput.substring(rawPlanOutput.length - maxPlanChars, rawPlanOutput.length)}` : rawPlanOutput;

          let output = `${commentToken}
          `;

          // init
          output += `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          `;

          // validate
          output += `#### Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`hcl
          ${validateOutput}
          \`\`\`
          </details>

          `;

          // plan
          output += `#### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          <details><summary>Show Plan</summary>

          \`\`\`hcl
          ${planOutput}
          \`\`\`
          </details>

          `;

          if (isPlanOutputTooLong) {
            output += `Plan output was truncated due to being too long. You can download the full plan from [GitHub Actions](${{ steps.upload.outputs.artifact-url }}).
            
            `;
          }
          else {
            output += `You can also download the full plan from [GitHub Actions](${{ steps.upload.outputs.artifact-url }}).
            
            `;
          }

          output += `*Pusher: @${{ github.actor }}, SHA: ${{ github.sha }}, Run: ${{ github.run_id }}*`;

          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          }
          else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }
