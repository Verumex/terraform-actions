name: terraform apply
description: Apply a terraform configuration
inputs:
  terraform_version:
    description: Version of terraform
    required: true
    default: "1.5.7"
  path:
    description: path to terraform configurations
    required: true
    default: "./"
  plan_path:
    description: path to a terraform plan file to reuse
    required: false
  quiet_output:
    description: a boolean flag controling whether the output is quieted for noisy terraform commands
    required: false
    default: "false"
  backend_config:
    description: Additional backend configuration to use during 'terraform init'. See https://developer.hashicorp.com/terraform/language/settings/backends/configuration#partial-configuration.
    required: false
    default: ""
runs:
  using: "composite"
  steps:
    - uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ inputs.terraform_version }}

    - name: terraform init
      id: init
      shell: bash
      working-directory: ${{ inputs.path }}
      run: |
        # put terraform backend partial configuration into a file.
        # See https://developer.hashicorp.com/terraform/language/settings/backends/configuration#partial-configuration
        cat <<EOT > ${{ runner.temp }}/backend.tf
        ${{ inputs.backend_config }}
        EOT

        terraform init -backend-config=${{ runner.temp }}/backend.tf

    - name: terraform apply
      id: apply
      shell: bash
      working-directory: ${{ inputs.path }}
      env:
        INPUT_VMX_PLAN_PATH: ${{ inputs.plan_path }}
        INPUT_QUIET_TERRAFORM_OUTPUT: ${{ inputs.quiet_output }}
        IS_VMX_PLAN_PATH_DEFINED: ${{ inputs.plan_path != '' }}
      run: |
        if [ "$IS_VMX_PLAN_PATH_DEFINED" == "true" ]; then
          if [ -f "$INPUT_VMX_PLAN_PATH" ]; then
            echo -e "Running from cached Terraform Plan at $INPUT_VMX_PLAN_PATH...\n"
            echo -e "Showing cached plan...\n"
            terraform show -no-color "$INPUT_VMX_PLAN_PATH"

            echo -e "Applying cached plan...\n"
            if [ "$INPUT_QUIET_TERRAFORM_OUTPUT" == "true" ]; then
              terraform refresh -input=false -no-color 1> /dev/null
              terraform apply -refresh=false -auto-approve -input=false -no-color "$INPUT_VMX_PLAN_PATH" 2>&1
            else
              terraform apply -auto-approve -input=false -no-color "$INPUT_VMX_PLAN_PATH" 2>&1
            fi
          else
            echo "A path to a Terraform Plan equal to $INPUT_VMX_PLAN_PATH was provided, but it does not represent a file!" 1>&2
            exit 1
          fi
        else
          if [ "$INPUT_QUIET_TERRAFORM_OUTPUT" == "true" ]; then
            terraform refresh -input=false -no-color 1> /dev/null
            terraform apply -refresh=false -auto-approve -input=false -no-color 2>&1
          else
            terraform apply -auto-approve -input=false -no-color 2>&1
          fi
        fi
